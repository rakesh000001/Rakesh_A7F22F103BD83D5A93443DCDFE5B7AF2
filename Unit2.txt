[09/10, 21:23] Bharathachakravarthi Clg: class BankAccount:
    def __init__(self, account_number, account_holder_name, initial_balance=0.0):
        self.__account_number = account_number
        self.__account_holder_name = account_holder_name
        self.__account_balance = initial_balance

    def deposit(self, amount):
        if amount > 0:
            self.__account_balance += amount
            print(f"Deposited ${amount}. New balance: ${self.__account_balance:.2f}")
        else:
            print("Invalid deposit amount. Please enter a positive value.")

    def withdraw(self, amount):
        if amount > 0:
            if self.__account_balance >= amount:
                self.__account_balance -= amount
                print(f"Withdrew ${amount}. New balance: ${self.__account_balance:.2f}")
            else:
                print("Insufficient funds for withdrawal.")
        else:
            print("Invalid withdrawal amount. Please enter a positive value.")

    def display_balance(self):
        print(f"Account Balance for {self.__account_holder_name}: ${self.__account_balance:.2f}")


# Test the BankAccount class
if __name__ == "__main__":
    # Create an instance of the BankAccount class
    my_account = BankAccount("123456789", "John Doe", 1000.0)

    # Display initial balance
    my_account.display_balance()

    # Deposit money
    my_account.deposit(500.0)

    # Withdraw money
    my_account.withdraw(200.0)
    
    # Try to withdraw more money than available
    my_account.withdraw(1500.0)

    # Display updated balance
    my_account.display_balance()
[09/10, 21:24] Bharathachakravarthi Clg: def sort_students(student_list):
    sorted_students = sorted(student_list, key=lambda x: x.cgpa, reverse=True)
    return sorted_students

# Define a Student class for testing
class Student:
    def __init__(self, name, roll_number, cgpa):
        self.name = name
        self.roll_number = roll_number
        self.cgpa = cgpa

# Test the function with a list of student objects
students = [
    Student("Alice", "A123", 3.9),
    Student("Bob", "B456", 3.7),
    Student("Charlie", "C789", 3.5),
    Student("David", "D012", 4.0),
]

sorted_students = sort_students(students)

# Print the sorted list of students
for student in sorted_students:
    print(f"Name: {student.name}, Roll Number: {student.roll_number}, CGPA: {student.cgpa}")
[09/10, 21:24] Bharathachakravarthi Clg: def linearSearchProduct(productList, targetProduct):
  indices = []
 
  for index, product in enumerate(productList):
     if product == targetProduct:
         indices.append(index)
  return indices
products = ["shoes","boot","loafer","shoes","sandal","shoes"]
target = "shoes"
target2 = 'apple'
result = linearSearchProduct(products , target)
print(result)
